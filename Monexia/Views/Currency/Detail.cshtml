@model Monexia.Models.CurrencyChartViewModel
@using Newtonsoft.Json

@{
    ViewData["Title"] = "Döviz Kurları Grafikleri - " + Model.Symbol;
}

<div class="max-w-4xl mx-auto px-2 md:px-8 py-10 animate-fade-in-up">
    <h2 class="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-500 via-cyan-500 to-green-400 dark:from-blue-300 dark:via-cyan-300 dark:to-green-200 mb-8">Döviz Kurları Fiyat Grafikleri: @Model.Symbol</h2>
    <div class="flex flex-col gap-8">
        @foreach (var key in Model.DateSets.Keys)
        {
            var id = "chart-" + key.Replace(" ", "").Replace(".", "").Replace("-", "");
            <div class="bg-white/90 dark:bg-gray-900/90 rounded-2xl shadow-2xl p-8 animate-fade-in-up">
                <div class="text-lg font-semibold mb-4 text-gray-700 dark:text-gray-200 flex items-center gap-2">
                    <svg class="w-5 h-5 text-blue-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M3 3v18h18" /></svg>
                    @key Fiyat Grafiği
                </div>
                <div class="h-80">
                    <canvas id="@id"></canvas>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
        @foreach (var key in Model.DateSets.Keys)
        {
                var chartId = "chart-" + key.Replace(" ", "").Replace(".", "").Replace("-", "");
                <text>
                    const ctx = document.getElementById('@chartId');
                    if (!ctx) return;

                    const chartCtx = ctx.getContext('2d');
                    const gradient = chartCtx.createLinearGradient(0, 0, 0, 300);
                    gradient.addColorStop(0, 'rgba(59, 130, 246, 0.4)');
                    gradient.addColorStop(1, 'rgba(59, 130, 246, 0)');

                    new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: @Html.Raw(JsonConvert.SerializeObject(Model.DateSets[key])),
                            datasets: [{
                                label: 'Kur Değeri',
                                data: @Html.Raw(JsonConvert.SerializeObject(Model.PriceSets[key])),
                                borderColor: 'rgba(59, 130, 246, 1)',
                                backgroundColor: gradient,
                                fill: true,
                                tension: 0.4,
                                pointRadius: 0,
                                pointHoverRadius: 6,
                                pointBackgroundColor: 'rgba(59, 130, 246, 1)',
                                pointBorderColor: '#fff',
                                pointHoverBackgroundColor: 'rgba(59, 130, 246, 1)',
                                pointHoverBorderColor: '#fff',
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    display: false
                                },
                                tooltip: {
                                    enabled: true,
                                    backgroundColor: '#1f2937',
                                    titleColor: '#f9fafb',
                                    bodyColor: '#d1d5db',
                                    padding: 12,
                                    cornerRadius: 8,
                                    displayColors: false,
                                    callbacks: {
                                        label: function(context) {
                                            let label = context.dataset.label || '';
                                            if (label) {
                                                label += ': ';
                                            }
                                            if (context.parsed.y !== null) {
                                                label += context.parsed.y.toFixed(4) + ' ₺';
                                            }
                                            return label;
                                        }
                                    }
                                }
                            },
                            scales: {
                                y: {
                                    beginAtZero: false,
                                    ticks: {
                                        callback: function (value) {
                                            return value.toFixed(4) + ' ₺';
                                        },
                                        color: document.body.classList.contains('dark') ? '#9ca3af' : '#6b7280',
                                        font: { size: 12 }
                                    },
                                    grid: {
                                        color: document.body.classList.contains('dark') ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.05)',
                                        drawBorder: false,
                                    }
                                },
                                x: {
                                    ticks: {
                                        color: document.body.classList.contains('dark') ? '#9ca3af' : '#6b7280',
                                        font: { size: 12 },
                                        maxRotation: 0,
                                        autoSkip: true,
                                        maxTicksLimit: 7
                                    },
                                    grid: { display: false, }
                                }
                            },
                            interaction: {
                                intersect: false,
                                mode: 'index',
                            }
                        }
                    });
                </text>
        }
        });
    </script>
}
