@model List<Monexia.Models.MetalViewModel>
@{
    ViewData["Title"] = "Altın & Gümüş Fiyatları";
    var updatedTime = (DateTime?)ViewBag.LastUpdated;
    var rates = ViewBag.CurrencyRates;
}
<div class="max-w-4xl mx-auto px-2 md:px-8 py-10 animate-fade-in-up">
    <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-8">
        <h2 class="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-yellow-500 via-gray-500 to-gray-400 dark:from-yellow-300 dark:via-gray-300 dark:to-gray-200">Altın & Gümüş Fiyatları</h2>
        @if (updatedTime.HasValue)
        {
            <span class="text-sm text-gray-500 dark:text-gray-300">Güncellenme: @updatedTime.Value.ToString("dd MMM yyyy HH:mm")</span>
        }
    </div>
    <!-- Converter Box -->
    <div class="bg-white/90 dark:bg-gray-900/90 rounded-2xl shadow-xl p-6 mb-8 flex flex-col md:flex-row gap-6 items-center justify-between">
        <div class="flex flex-col gap-2 w-full md:w-1/2">
            <label for="gramInput" class="text-sm font-medium text-gray-700 dark:text-gray-200">Gram miktarı</label>
            <div class="flex gap-2 items-center">
                <input id="gramInput" type="number" min="0" step="0.01" value="1" class="rounded-lg border border-gray-300 dark:border-gray-700 bg-gray-50 dark:bg-gray-900 px-4 py-2 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-yellow-500 w-full" />
                <button id="convertBtn" type="button" class="px-4 py-2 rounded-xl bg-gradient-to-r from-yellow-500 to-yellow-400 hover:from-yellow-600 hover:to-yellow-500 text-white font-semibold text-base transition shadow">Hesapla</button>
            </div>
        </div>
        <div class="flex flex-col gap-2 w-full md:w-1/2">
            <div class="flex flex-col md:flex-row gap-4 w-full">
                @foreach (var item in Model)
                {
                    <div class="flex-1 bg-gradient-to-br from-yellow-100 to-gray-100 dark:from-yellow-900 dark:to-gray-900 rounded-xl p-4 flex flex-col items-center shadow">
                        <div class="text-lg font-bold mb-1">@item.Name</div>
                        <div class="text-sm text-gray-600 dark:text-gray-300 mb-2">@item.Symbol</div>
                        <div class="flex flex-col gap-1 w-full">
                            <div class="flex items-center justify-between w-full">
                                <span class="text-xs text-gray-500">TL Karşılığı</span>
                                <span id="@item.Symbol-try-conv" class="font-semibold text-yellow-700 dark:text-yellow-300">₺@item.PriceTry.ToString("N2")</span>
                            </div>
                            <div class="flex items-center justify-between w-full">
                                <span class="text-xs text-gray-500">USD Karşılığı</span>
                                <span id="@item.Symbol-usd-conv" class="font-semibold text-indigo-700 dark:text-indigo-300">$@item.PriceUsd.ToString("N2")</span>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    <!-- Modern Metal Cards -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
        @foreach (var item in Model)
        {
            <div class="bg-white/90 dark:bg-gray-900/90 rounded-2xl shadow-2xl p-8 flex flex-col gap-4 items-center">
                <div class="flex items-center gap-3 mb-2">
                    <span class="text-2xl font-bold text-yellow-600 dark:text-yellow-300">@item.Name</span>
                    <span class="text-base font-semibold text-gray-500">(@item.Symbol)</span>
                </div>
                <div class="flex flex-col gap-2 w-full">
                    <div class="flex items-center justify-between w-full">
                        <span class="text-sm text-gray-600">Gram Fiyatı (₺)</span>
                        <span id="@item.Symbol-try" class="text-lg font-bold text-yellow-700 dark:text-yellow-300">@item.PriceTry.ToString("N2") ₺</span>
                    </div>
                    <div class="flex items-center justify-between w-full">
                        <span class="text-sm text-gray-600">Gram Fiyatı ($)</span>
                        <span id="@item.Symbol-usd" class="text-lg font-bold text-indigo-700 dark:text-indigo-300">@item.PriceUsd.ToString("N2") $</span>
                    </div>
                    @if (item.Price24K.HasValue)
                    {
                        <div class="flex items-center justify-between w-full">
                            <span class="text-sm text-gray-600">24 Ayar (₺)</span>
                            <span class="text-base font-semibold">@item.Price24K.Value.ToString("N2") ₺</span>
                        </div>
                    }
                    @if (item.Price22K.HasValue)
                    {
                        <div class="flex items-center justify-between w-full">
                            <span class="text-sm text-gray-600">22 Ayar (₺)</span>
                            <span class="text-base font-semibold">@item.Price22K.Value.ToString("N2") ₺</span>
                        </div>
                    }
                    @if (item.Change.HasValue && item.ChangePercentage.HasValue)
                    {
                        <div class="flex items-center justify-between w-full">
                            <span class="text-sm text-gray-600">Değişim</span>
                            <span class="text-base font-semibold @(item.Change > 0 ? "text-green-600" : "text-red-600")">
                                @(item.Change > 0 ? "+" : "")@item.Change.Value.ToString("N2") (@item.ChangePercentage.Value.ToString("N2")%)
                            </span>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>
@section Scripts {
    <script>
        // Converter logic
        const gramInput = document.getElementById('gramInput');
        const convertBtn = document.getElementById('convertBtn');

        function updateConverterUI(goldTry, goldUsd, silverTry, silverUsd) {
            document.getElementById('XAU-try-conv').textContent = '₺' + goldTry.toLocaleString('tr-TR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            document.getElementById('XAU-usd-conv').textContent = '$' + goldUsd.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            document.getElementById('XAG-try-conv').textContent = '₺' + silverTry.toLocaleString('tr-TR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            document.getElementById('XAG-usd-conv').textContent = '$' + silverUsd.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
        }

        async function calculateConverter() {
            const gram = parseFloat(gramInput.value) || 0;

            if (gram <= 0) {
                updateConverterUI(0, 0, 0, 0);
                return;
            }

            try {
                // Hesapla butonunu devre dışı bırak
                convertBtn.disabled = true;
                convertBtn.textContent = 'Hesaplanıyor...';

                const response = await fetch('/Metals/Calculate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ gram: gram })
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                const data = await response.json();

                if (data.success) {
                    updateConverterUI(
                        data.gold.tryVal,
                        data.gold.usdVal,
                        data.silver.tryVal,
                        data.silver.usdVal
                    );
                } else {
                    console.error('Hesaplama hatası:', data.message);
                    alert('Hesaplama sırasında bir hata oluştu: ' + data.message);
                }
            } catch (error) {
                console.error('Hesaplama hatası:', error);
                alert('Hesaplama sırasında bir hata oluştu. Lütfen tekrar deneyin.');
            } finally {
                // Hesapla butonunu tekrar aktif et
                convertBtn.disabled = false;
                convertBtn.textContent = 'Hesapla';
            }
        }

        convertBtn.addEventListener('click', calculateConverter);

        // Input değeri değiştiğinde de hesapla (debounce ile)
        let timeoutId;
        gramInput.addEventListener('input', function() {
            clearTimeout(timeoutId);
            timeoutId = setTimeout(calculateConverter, 500); // 500ms bekle
        });

        // İlk yüklemede bir kez çalıştır (default değer için)
        calculateConverter();
    </script>
}